#include<bits/stdc++.h>
using namespace std;

// A Tree node
struct Node {
    char ch;
    int freq;
    Node *left, *right;

    Node(char ch, int freq) {
        left = right = nullptr;
        this->ch = ch;
        this->freq = freq;
    }
};

// Comparison object to be used to order the heap
struct compare {
    bool operator()(Node* l, Node* r) {
        return (l->freq > r->freq);
    }
};

// Function to print Huffman Codes in preorder traversal
void printCodes(Node* root, string str) {
    if (!root)
        return;

    if (root->ch != '$')
        cout << str << " ";

    printCodes(root->left, str + "0");
    printCodes(root->right, str + "1");
}

// Function to build the Huffman Tree and print codes by preorder traversal
void buildHuffmanTree(string S, vector<int> f) {
    Node *left, *right, *top;

    // Create a min heap & inserts all characters of data[]
    priority_queue<Node*, vector<Node*>, compare> minHeap;
    for (int i = 0; i < S.size(); ++i)
        minHeap.push(new Node(S[i], f[i]));

    // Iterate while size of heap doesn't become 1
    while (minHeap.size() != 1) {
        // Extract the two minimum freq items from heap
        left = minHeap.top();
        minHeap.pop();

        right = minHeap.top();
        minHeap.pop();

        // Create a new internal node with frequency equal to the sum of the two nodes frequencies
        top = new Node('$', left->freq + right->freq);
        top->left = left;
        top->right = right;

        // Add this node to the min heap
        minHeap.push(top);
    }

    // Print Huffman codes using the Huffman tree built above
    printCodes(minHeap.top(), "");
}

int main()
{
    string S = "abcdef";
    vector<int> f = {5, 9, 12, 13, 16, 45};

    buildHuffmanTree(S, f);

    return 0;
}
